package Testing.Geometry;

import java.util.Arrays;
import Geometry.*;

import static Testing.Geometry.Test.shouldBeTrue;

public class TestGeometry {
    static TestGeometry testGeometry = new TestGeometry();

    public static void main(String[] args) {
        // test the volume and the extreme function
        testGeometry.testExtreme();
        testGeometry.testVolume();
        testGeometry.testCompareTo();

        // test Encapsulation combinations for different Geometries
        testGeometry.testEncapsulatePointPoint();
        testGeometry.testEncapsulatePointRectangle();
        testGeometry.testEncapsulateRectangleRectangle();
        testGeometry.testEncapsulatePointVolume();
        testGeometry.testEncapsulateVolumeVolume();

        // test special Encapsulations
        testGeometry.testContaining();
        testGeometry.testOffset();
        testGeometry.testOverlapping();

        Test.printError();
    }

    /**
     * Makes an array out of many doubles.
     * @param d doubles
     * @return array containing all d's
     */
    private double[] doubles(double... d){
        return d;
    }

    private boolean sameCoordinates(Point point, Point point1){
        return Arrays.equals(point.getCoordinates(), point.getCoordinates());
    }


    public void testExtreme(){
        Point point = new Point(doubles(1,3));
        Point point2 = new Point(doubles(2,6));
        Point point3 = new Point(doubles(4,1));
        Point point4 = new Point(doubles(7,5));

        shouldBeTrue(sameCoordinates(Point.getExtreme(new Point[]{point,point2,point3,point4}, true),new Point(doubles(7,6))), "The Max of a number of Points is not correctly calculated.");
        shouldBeTrue(sameCoordinates(Point.getExtreme(new Point[]{point,point2,point3,point4}, false),new Point(doubles(1,1))), "The Max of a number of Points is not correctly calculated.");
    }

    public void testVolume(){
        Point point = new Point(doubles(1,2,3));
        Point point2 = new Point(doubles(4,5,2));

        Volume volume = new Volume(point,point2);
        Rectangle rectangle = new Rectangle(new Point2D(2.0, 1.0),new Point2D(4.0,5.0));

        shouldBeTrue(point.volume() == 0, "The volume for a rectangle is not correct.");
        shouldBeTrue(rectangle.volume() == 8, "The volume for a rectangle is not correct.");
        shouldBeTrue(volume.volume() == 9, "The volume for a volume is not correct.");

    }

    public void testCompareTo(){
        Point point = new Point(doubles(1,2,3));
        Point point2 = new Point(doubles(4,5,2));

        Volume volume = new Volume(point,point2);
        Rectangle rectangle = new Rectangle(new Point2D(2.0, 1.0),new Point2D(4.0,5.0));

        shouldBeTrue(point.compareTo(point2) == 0, "Two points are not properly compared to one another.");
        shouldBeTrue(rectangle.compareTo(volume) == -1, "Two Volumes are not compared to one another");
        shouldBeTrue(rectangle.compareTo(point) == 8, "The comparison between a volume and a point does not work");

    }

    public boolean checkEncapsulation(Volume e, Point point, Point point2){
        return sameCoordinates(e.getP1(),point) && sameCoordinates(e.getP2(),point2);
    }

    public boolean sameEncapsulation(Volume e, Volume e2){
        return sameCoordinates(e.getP1(),e2.getP1()) && sameCoordinates(e.getP2(),e2.getP2()) || sameCoordinates(e.getP1(),e2.getP2()) && sameCoordinates(e.getP2(),e2.getP1());
    }

    public void testEncapsulatePointPoint(){
        Point2D point = new Point2D(2.0, 1.0);
        Point2D point2 = new Point2D(4.0,3.0);
        Volume encapsulation = (Volume) point.encapsulate(point2);
        Volume encapsulation2 = (Volume) point2.encapsulate(point);

        shouldBeTrue(checkEncapsulation(encapsulation,point,point2), "The encapsulation of two points does not work properly the new Geometry should have the coordinates of the two points");
        shouldBeTrue(sameEncapsulation(encapsulation,encapsulation2), "Two encapsulations should equal each other if they are generated by the same Geometry. This is not given for two points.");

    }

    public void testEncapsulatePointRectangle(){
        Point2D point = new Point2D(2.0, 1.0);
        Rectangle rectangle = new Rectangle(new Point2D(4.0,3.0),new Point2D(3.0,2.0));

        Volume encapsulation = (Volume) point.encapsulate(rectangle);
        Volume encapsulation2 = (Volume) rectangle.encapsulate(point);

        shouldBeTrue(checkEncapsulation(encapsulation,point,rectangle.getP1()), "The encapsulation of a point and a rectangle does not work properly the new Geometry should have the coordinates of the most far off coordinates.");
        shouldBeTrue(sameEncapsulation(encapsulation,encapsulation2), "Two encapsulations should equal each other if they are generated by the same Geometry. This is not given for a point and a Rectangle.");
    }

    public void testEncapsulateRectangleRectangle(){
        Rectangle rectangle = new Rectangle(new Point2D(3.0,1.0),new Point2D(4.0,2.0));
        Rectangle rectangle2 = new Rectangle(new Point2D(4.0,3.0),new Point2D(3.0,2.0));

        Volume encapsulation = (Volume) rectangle.encapsulate(rectangle2);
        Volume encapsulation2 = (Volume) rectangle.encapsulate(rectangle2);

        shouldBeTrue(checkEncapsulation(encapsulation,rectangle.getP1(),rectangle2.getP1()), "The encapsulation of two Rectangles does not work properly the new Geometry should have the coordinates of the most far off coordinates.");
        shouldBeTrue(sameEncapsulation(encapsulation,encapsulation2), "Two encapsulations should equal each other if they are generated by the same Geometry. This is not given for two Rectangles.");
    }

    public void testEncapsulatePointVolume(){
        Point point = new Point(doubles(1,2,3));
        Volume volume = new Volume(new Point(doubles(4,5,6)),new Point(doubles(6,7,8)));

        Volume encapsulation = (Volume) point.encapsulate(volume);
        Volume encapsulation2 = (Volume) volume.encapsulate(point);

        shouldBeTrue(checkEncapsulation(encapsulation,point,volume.getP2()), "The encapsulation of two Rectangles does not work properly the new Geometry should have the coordinates of the most far off coordinates.");
        shouldBeTrue(sameEncapsulation(encapsulation,encapsulation2), "Two encapsulations should equal each other if they are generated by the same Geometry. This is not given for a Point and a Rectangle.");
    }

    public void testEncapsulateVolumeVolume(){
        Volume volume = new Volume(new Point(doubles(1,2,3)),new Point(doubles(2,3,4)));
        Volume volume1 = new Volume(new Point(doubles(4,5,6)),new Point(doubles(6,7,8)));

        Volume encapsulation = (Volume) volume.encapsulate(volume1);
        Volume encapsulation2 = (Volume) volume1.encapsulate(volume);

        shouldBeTrue(checkEncapsulation(encapsulation,volume.getP1(),volume1.getP2()), "The encapsulation of two Volumes does not work properly the new Geometry should have the coordinates of the most far off coordinates.");
        shouldBeTrue(sameEncapsulation(encapsulation,encapsulation2), "Two encapsulations should equal each other if they are generated by the same Geometry. This is not given for two Volumes.");
    }

    public void testContaining(){
        Volume volume = new Volume(new Point(doubles(1,1)),new Point(doubles(4,5)));
        Volume volume1 = new Volume(new Point(doubles(2,2)),new Point(doubles(3,4)));
        Volume encapsulation = (Volume) volume.encapsulate(volume1);
        shouldBeTrue(checkEncapsulation(encapsulation,volume.getP1(),volume.getP2()), "If a Volume is contained in the another one their encapsulation should equal the bigger Volume.");
    }

    public void testOffset(){
        Volume volume = new Volume(new Point(doubles(2,2)),new Point(doubles(4,6))); // bigger on y
        Volume volume1 = new Volume(new Point(doubles(4,1)),new Point(doubles(5,5))); // lower von

        Volume encapsulation = (Volume) volume.encapsulate(volume1);
        shouldBeTrue(checkEncapsulation(encapsulation,new Point(doubles(2,1)), new Point(doubles(5,6))), "The new corner points are made from the points of the rectangles.");
    }

    public void testOverlapping(){
        Volume volume = new Volume(new Point(doubles(-2,-3)),new Point(doubles(-4,4))); // third and fourth quadrant
        Volume volume1 = new Volume(new Point(doubles(1,1)),new Point(doubles(-5,3))); // first and fourth quadrant

        Volume encapsulation = (Volume) volume.encapsulate(volume1);
        shouldBeTrue(checkEncapsulation(encapsulation,new Point(doubles(-5,-3)),new Point(doubles(1,4))), "The encapsulation should regardless they overlapp each other or not and if they are negative or not.");
    }

}
